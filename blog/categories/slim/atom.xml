<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: slim | Tieh Kai Woo's Blog]]></title>
  <link href="http://cheunghy.github.io/blog/categories/slim/atom.xml" rel="self"/>
  <link href="http://cheunghy.github.io/"/>
  <updated>2014-11-27T21:53:03+08:00</updated>
  <id>http://cheunghy.github.io/</id>
  <author>
    <name><![CDATA[Tieh Kai Woo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slim 模版语言]]></title>
    <link href="http://cheunghy.github.io/blog/2014/08/17/the-slim-template-language/"/>
    <updated>2014-08-17T15:23:29+08:00</updated>
    <id>http://cheunghy.github.io/blog/2014/08/17/the-slim-template-language</id>
    <content type="html"><![CDATA[<p>Slim是一个快速的，轻量级的模版语言，它的目标是简化视图语法到仅剩不可或缺的部分，却又不要变的晦涩。</p>

<p>Slim的核心语法是这样创造来的：“最少需要什么，什么可以省略？”</p>

<p>Slim项目的初衷是极简主义的语法和最高的执行效率，如果一个人不使用Slim，决不是因为速度。Benchmarks在<a href="http://travis-ci.org/slim-template/slim">这里</a>。</p>

<h3>基本语法</h3>

<p>``` ruby
doctype 5
html
  head</p>

<pre><code>title Slim Example
meta name="keywords" content="template language"
meta name="author" content=author
= csrf_meta_tags
coffee:
  alert "Slim supports embedded javascript!"
</code></pre>

<p>  body</p>

<pre><code>h1 Markup examples
#content
  p This example shows you how a basic Slim file looks.
p
  | file names in #{@dir}
ul
  - for file in @files
    li
      = file
div#footer
  == render 'footer'
  | Copyright &amp;copy; #{@year} #{@author}
</code></pre>

<p>```</p>

<h3>主要功能</h3>

<ul>
<li>优雅的语法

<ul>
<li>简洁的语法，使用锁进，不带HTML标签</li>
<li>嵌入带标签的HTML</li>
<li>可以配置的缩写，比如#生成&lt;div id=&ldquo;&hellip;&rdquo;>，.生成&lt;div class=&ldquo;&hellip;&rdquo;></li>
</ul>
</li>
<li>安全性

<ul>
<li>自动引用特殊字符</li>
<li>支持Rails的 html_safe?</li>
</ul>
</li>
<li>可配置，可以使用插件来扩展

<ul>
<li>支持扩展语法</li>
<li>支持国际化</li>
</ul>
</li>
<li>性能更佳

<ul>
<li>比Rails默认的erb模版性能更好</li>
<li>流支持</li>
</ul>
</li>
<li>主流框架支持Slim （Rails，Sinatra，Python有Plim克隆）</li>
<li>Unicode支持</li>
<li>可以嵌入Markdown，Textile等引擎</li>
</ul>


<h3>令它工作</h3>

<h4>获得Slim</h4>

<p>作为一个ruby gem安装：
<code>
gem install slim
</code></p>

<h4>集成到Rails项目中</h4>

<p>在Gemfile中添加这行
<code>ruby
gem 'slim-rails'
</code></p>

<h4>将Slim设置成默认的模版</h4>

<p>在application.rb的Rails::Application的子类中添加这块
<code>ruby
config.generators do |g|
  g.template_engine :slim
end
</code>
现在，每次创建新的控制器和视图，slim就在那里。</p>

<h3>语法详解</h3>

<h4>凭缩进来嵌套</h4>

<p>缩进深度按照喜好，2个空格，或是5个空格，至少一个空格就可以。</p>

<h4>| 管道字符</h4>

<p>``` ruby
body
  p</p>

<pre><code>|
  这里有一行字.
</code></pre>

<p><code>
管道字符告诉Slim，复制这一行到目标html中去。（注意管道字符后面的每一行都要缩进一个深度，多的空格会被直接带到目标html中）这样可以逃避自动引用特殊字符。所以在管道字符后面插入html成为了可能，像这样：
</code> ruby
&ndash; articles.each do |a|
  | <tr><td>#{a.name}</td><td>#{a.description}</td></tr>
```</p>

<h4>流程控制和内容输出</h4>

<p>上面一段出现了减号。减号意味着流程控制，常见的流程控制有循环和条件。end是不需要有的，甚至在Slim中是禁止的，因为块是由缩紧决定的。如果Ruby代码太长，可以用友好的\来分隔，参数之间有逗号的，可以省略\。</p>

<p>等号告诉Slim制造输出。如果一行代码太长，\的规则一样适用。
<code>ruby
= javascript_include_tag 'application',
  "data-turbolinks-track" =&gt; true
</code>
两个等号同样可以，区别是两个等号的不会被自用引用特殊字符。像这样：
<code>ruby
p
  ' file names in
  = "&lt;#@dir&gt;"
</code>
网页上面显示 file names in &lt;/Users/tieh/example>
生成的html &lt;p>file names in &lt;/Users/tieh/example&gt;&lt;/p>
<code>ruby
p ' file names in
  == "&lt;#@dir&gt;"
</code>
网页上面显示 file names in， 后面的字却不见了，然后看下源代码
生成的html是 &lt;p>file names in &lt;/Users/1/work/demo>&lt;/p>，一个奇怪的标签。
总结一下，生成内容的话，尽量使用=，如果生成html标签的话，使用==。
这段代码中出现一个单引号，单引号代替管道字符是为了留出一个右空格，类似的用法还有=>，=&lt;，==>，==&lt;，tag&lt;，tag>，tag&lt;>，和你想象的一样。</p>

<h4>代码注释</h4>

<p>``` ruby
body
  p</p>

<pre><code>| 我不是注释
/ 我是Slim注释
  我也是Slim注释
/! 我是html注释
</code></pre>

<p><code>
注释使用/斜杠，单个斜杠不会被复制到目标html中，带有叹号的会被复制到html中，上面一段slim代码会生成这样的html代码：
</code> html
<body><p><!--我是html注释--></p></body>
```</p>

<h5>特殊照顾IE</h5>

<p><code>ruby
/[if IE]
  p 换一个好点的浏览器
</code>
上面这段会被生成
``` html</p>

<!--[if IE]><p>换一个好点的浏览器</p><![endif]-->


<p>```</p>

<h4>文档声明</h4>

<p>文档声明标签用来轻松地生成复杂的文档声明。一般在Slim的最上面。
``` ruby
doctype 5
/ 会生成&lt;!DOCTYPE html>
doctype html
/ 同上
doctype 1.1
/ 生成xhtml的&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD XHTML 1.1//EN&rdquo;</p>

<pre><code>"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
</code></pre>

<p>doctype xml
/ 生成xml的声明&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo; ?>
```
多数可能会用不到，并不多做解释。它会按照你预想的来工作，比如doctype frameset，doctype strict，doctype basic，doctype transitional等。详细列表在<a href="http://rdoc.info/gems/slim/frames">这里</a></p>

<h4>关闭标签</h4>

<p>关闭标签无害，你可以这样写，但不必要，因为标签会被自动关闭。
<code>ruby
img src="image.png" /
</code></p>

<h4>行内嵌套</h4>

<p>你可以使用行内嵌套来让代码紧凑。
<code>ruby
ul
  li.first: a href="http://cheunghy.github.io/a" A link
  li: a href="http://cheunghy.github.io/b" B link
</code></p>

<h4>文本上下文</h4>

<p>文本可以与属性写在同一行。
<code>ruby
body
  h1 id="headline" Welcome to my site.
</code>
文本也可以被嵌套，但必须用一个管道字符来取消处理。
``` ruby
body
  h1 id=&ldquo;headline&rdquo;</p>

<pre><code>| Welcome to my site.
</code></pre>

<p>```</p>

<h4>动态内容</h4>

<p>动态内容一样使用等号和双等号，用法和你预期的一样。动态内容可以写在同一行，也可以嵌套。
``` ruby
body
  h1 id=&ldquo;headline&rdquo; = page_headline
/ 两者都可以
body
  h1 id=&ldquo;headline&rdquo;</p>

<pre><code>= page_headline
</code></pre>

<p>```</p>

<h4>属性</h4>

<p>属性的写法就像去掉开闭标签的html。可以直接写：
<code>ruby
img src="path/to/image.png"
</code>
也可以使用动态的属性：
<code>ruby
img src=my_rails_helper_method
</code>
属性可以被封装，来增强代码可读性：
``` ruby
body
  h1(id=&ldquo;logo&rdquo;) = page_logo
  h2[id==&ldquo;tagline&rdquo;</p>

<pre><code>class="small tagline"] = page_tagline
</code></pre>

<p>```
被封装的属性，可以折行。你可以自己定义封装的符号。默认的有()，[]，{}。两个等号同样可以取消被转换处理。</p>

<h4>字符串插值</h4>

<p>在写文本的地方，比如双引号之中，和html的标签中的文本，你可以使用字符串插值，在标签中的文本里，#@instance_var不会被处理，可以不简略地写#{@instance_var}。
``` ruby
body
  table</p>

<pre><code>- for user in users
  td id="user_#{user.id}" class=user.role
    a href=user_action(user, :edit) Edit #{user.name}
    a href=(path_to_user user) = user.name
</code></pre>

<p>```</p>

<h4>布尔属性</h4>

<p>true, false, nil会被解释为布尔。赋值可以不带引号。更进一步地（简化），如果使用属性封装，可以省略赋值。
``` ruby
input type=&ldquo;text&rdquo; disabled=&ldquo;disabled&rdquo;
input type=&ldquo;text&rdquo; disabled=true
input(type=&ldquo;text&rdquo; disabled)</p>

<p>input type=&ldquo;text&rdquo;
input type=&ldquo;text&rdquo; disabled=false
input type=&ldquo;text&rdquo; disabled=nil
```</p>

<h4>属性混合</h4>

<p>标签和属性是可以混合在一起写的，并且可以配置。
<code>ruby
a.menu class="highlight" href="http://slim-lang.com/" Slim-lang.com
</code>
会生成
<code>html
&lt;a class="menu highlight" href="http://slim-lang.com/"&gt;Slim-lang.com&lt;/a&gt;
</code></p>

<h4>展开的属性</h4>

<p>展开缩写允许你把ruby hash转换为一对对属性内容
<code>ruby
.card*{'data-url'=&gt;place_path(place), 'data-id'=&gt;place.id} = place.name
</code>
会生成
``` ruby</p>

<div class="card" data-id="1234" data-url="/place/1234">Slim's house</div>


<p><code>
你可以使用返回hash的语句。
</code> ruby
.card <em>method_which_returns_hash = place.name
.card </em>@hash_instance_variable = place.name
```</p>

<h4>动态标签</h4>

<p>你可以凭展开缩写来做到动态标签，只需要一个tag键。
``` ruby
ruby:
  def a_unless_current</p>

<pre><code>@page_current ? {:tag =&gt; 'span'} : {:tag =&gt; 'a', :href =&gt; 'http://slim-lang.com/'}
</code></pre>

<p>  end
&ndash; @page_current = true
  <em>a_unless_current Link
&ndash; @page_current = false
  </em>a_unless_current Link
<code>
会生成
</code> html
<span>Link</span><a href="http://slim-lang.com/">Link</a>
```</p>

<h4>嵌入的引擎</h4>

<p>像这样：
``` ruby
coffee:
  square = (x) &ndash;> x * x</p>

<p>markdown:
  #Header</p>

<pre><code>Hello from #{"Markdown!"}
Second Line!
</code></pre>

<p>css:
  .my_class {</p>

<pre><code>font: 12px/30px;
</code></pre>

<p>  }
```</p>

<h3>编辑器</h3>

<p>Textmate与Sublime的Bundle在<a href="https://github.com/slim-template/ruby-slim.tmbundle">这里</a></p>

<p>Emacs的slim-mode在这里<a href="https://github.com/slim-template/emacs-slim">这里</a></p>

<p>Vim的插件在<a href="https://github.com/slim-template/vim-slim">这里</a></p>

<h3>转换erb或haml到slim</h3>

<p>erb到slim的转换器在<a href="https://github.com/slim-template/html2slim">这里</a></p>

<p>haml到slim的转换器在<a href="https://github.com/slim-template/haml2slim">这里</a></p>

<h3>总结</h3>

<p>这篇文章浅浅介绍了Slim的安装和集成，语法和开发工具。没有介绍Slim的自定义缩写，Slim中引用Slim作为片段，支持的引擎，拥有的插件，和配置Slim。更深入的介绍在<a href="http://rdoc.info/gems/slim/frames">官方的文档</a>，这里的大部分内容来自官方的文档。</p>

<p>由于octopress的代码嵌入不支持slim，（因为它是小众的追求极致的新模版语言），代码高亮的不是很好。我可能会在以后更新中修复这个问题。</p>

<p>对于Slim给人的第一印象，<a href="http://slim-lang.com">官方网站</a>做得很精美。</p>

<p>欢迎评论和交流。</p>
]]></content>
  </entry>
  
</feed>
